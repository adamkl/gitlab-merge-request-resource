#!/bin/bash
# vim: set ft=sh

set -e -u -x

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

TMPDIR=${TMPDIR:-/tmp}

source "$(dirname "$0")/common.sh"

payload="$(mktemp "${TMPDIR}/gitlab-merge-request-resource.XXXXXX")"

cat > "${payload}" <&0

configure_ssl_verification "${payload}"

uri="$(jq -r '.source.uri // ""' < "${payload}")"
private_token="$(jq -r '.source.private_token // ""' < "${payload}")"
no_ssl="$(jq -r '.source.no_ssl // ""' < "${payload}")"
version_sha="$(jq -r '.version.sha // ""' < "${payload}")"

if [[ "${uri}" == "git@"* ]]; then
  gitlab_host="$(echo "${uri}" | sed -rn 's/git@(.*):(.*)\.git/\1/p')"
  project_path="$(echo "${uri}" | sed -rn 's/git@(.*):(.*)\.git/\2/p')"
  protocol='https'
elif [[ "${uri}" == "ssh://"* ]]; then
  gitlab_host=$"$(echo "${uri}" | sed -rn 's/ssh:\/\/git@([^\/:]*)(:([^\/]*))?\/(.*)\.git/\1/p')"
  project_path=$"$(echo "${uri}" | sed -rn 's/ssh:\/\/git@([^\/:]*)(:([^\/]*))?\/(.*)\.git/\4/p')"
  protocol='https'
else
  gitlab_host="$(echo "${uri}" | sed -rn 's/(https?):\/\/([^\/]*)\/(.*)\.git/\2/p')"
  project_path="$(echo "${uri}" | sed -rn 's/(https?):\/\/([^\/]*)\/(.*)\.git/\3/p')"
  protocol="$(echo "${uri}" | sed -rn 's/(https?):\/\/([^\/]*)\/(.*)\.git/\1/p')"
fi

if [ "${no_ssl}" == 'true' ]; then
    protocol='http'
fi

version_updated_at=0
if [ ! -z "${version_sha}" ]; then
    version_curl_resp="$(curl -s -H "private-token: ${private_token}" "${protocol}://${gitlab_host}/api/v4/projects/$(urlencode "${project_path}")/repository/commits/${version_sha}")"
    version_updated_at_uncorrected="$(echo "${version_curl_resp}" | jq '.committed_date|.[:19]|strptime("%Y-%m-%dT%H:%M:%S")')"
    version_tzHour="$(echo "${version_curl_resp}"  | jq '.committed_date|.[23:26] | tonumber')"
    version_tzMin="$(echo "${version_curl_resp}" | jq '.committed_date|.[27:] | tonumber')"
    version_updated_at_corrected_hour="$(echo "${version_updated_at_uncorrected}" | jq --argjson offset $version_tzHour '.[3] = .[3] + $offset')"
    version_updated_at_corrected_hour_and_min="$(echo "${version_updated_at_corrected_hour}" | jq --argjson offset $version_tzMin '.[4] = .[4] + $offset')"
    version_updated_at="$(echo "${version_updated_at_corrected_hour_and_min}" | jq '.|mktime')"
fi

open_mrs="$(curl -s -H "private-token: ${private_token}" "${protocol}://${gitlab_host}/api/v4/projects/$(urlencode "${project_path}")/merge_requests?state=opened&order_by=updated_at")"
num_mrs="$(echo "${open_mrs}" | jq 'length')"

new_versions=''

for i in $(seq 0 $((num_mrs - 1))); do
    mr="$(echo "${open_mrs}" | jq -r '.['"$i"']')"
    mr_sha="$(echo "${mr}" | jq -r '.sha')"
    if [ "${mr_sha}" != "null" ]; then
        mr_curl_resp="$(curl -s -H "private-token: ${private_token}" "${protocol}://${gitlab_host}/api/v4/projects/$(urlencode "${project_path}")/repository/commits/${mr_sha}")"
        mr_updated_at_uncorrected="$(echo "${mr_curl_resp}" | jq '.committed_date|.[:19]|strptime("%Y-%m-%dT%H:%M:%S")')"
        mr_tzHour="$(echo "${mr_curl_resp}"  | jq '.committed_date|.[23:26] | tonumber')"
        mr_tzMin="$(echo "${mr_curl_resp}" | jq '.committed_date|.[27:] | tonumber')"
        mr_updated_at_corrected_hour="$(echo "${mr_updated_at_uncorrected}" | jq --argjson offset $mr_tzHour '.[3] = .[3] + $offset')"
        mr_updated_at_corrected_hour_and_min="$(echo "${mr_updated_at_corrected_hour}" | jq --argjson offset $mr_tzMin '.[4] = .[4] + $offset')"
        mr_updated_at="$(echo "${mr_updated_at_corrected_hour_and_min}" | jq '.|mktime')"
        if [ "${mr_updated_at}" -gt "${version_updated_at}" ] || [ -z "${version_sha}" ]; then
            new_versions="${new_versions},{\"sha\":\"${mr_sha}\"}"
        fi
    fi
done

new_versions="${new_versions#','}" # remove trailing comma
new_versions="[${new_versions}]" # make JSON array

if [ "${new_versions}" == '[]' ] && ! [ -z "${version_sha}" ]; then
    new_versions="[{\"sha\":\"${version_sha}\"}]"
fi

jq -n "${new_versions}" >&3
